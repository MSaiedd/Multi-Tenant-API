// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Multi_Tenant_API.Infrastructure.Data;

#nullable disable

namespace Multi_Tenant_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250802001135_softdeleteupdate")]
    partial class softdeleteupdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Multi_Tenant_API.Domain.EntityA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("EntityA");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Entity A1",
                            TenantId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Entity A2",
                            TenantId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Entity A3",
                            TenantId = 2
                        });
                });

            modelBuilder.Entity("Multi_Tenant_API.Domain.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tenant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = "APIKEY_TENANT_A",
                            Name = "Tenant A"
                        },
                        new
                        {
                            Id = 2,
                            ApiKey = "APIKEY_TENANT_B",
                            Name = "Tenant B"
                        });
                });

            modelBuilder.Entity("Multi_Tenant_API.Domain.EntityA", b =>
                {
                    b.HasOne("Multi_Tenant_API.Domain.Tenant", "Tenant")
                        .WithMany("EntityA")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Multi_Tenant_API.Domain.Tenant", b =>
                {
                    b.Navigation("EntityA");
                });
#pragma warning restore 612, 618
        }
    }
}
